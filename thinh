#include <fstream>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <iomanip>
#include <chrono>
#include <thread>
#include <cstdlib>

using namespace std;
void print_array(const vector<vector<int>>& arr, const vector<pair<int, int>>& path);
void print_path(const vector<pair<int, int>>& path);
void maze_arc(const vector<vector<int>>& arr, pair<int, int>& position, int& points, vector<pair<int, int>>& path);
bool isValidMove(const vector<vector<int>>& arr, const vector<vector<bool>>& visited, int x, int y);
pair<int, int> findNextMove(const vector<vector<int>>& arr, const vector<vector<bool>>& visited, int x, int y);

void print_array(const vector<vector<int>>& arr, const vector<pair<int, int>>& path) {
    int maxDigits = 0;
    cout << "The array of robot:" << endl;

    for (const auto& row : arr) {
        for (const auto& num : row) {
            int digits = to_string(num).length();
            if (digits > maxDigits) {
                maxDigits = digits;
            }
        }
    }

    for (int i = 0; i < static_cast<int>(arr.size()); i++) {
        for (int j = 0; j < static_cast<int>(arr[i].size()); j++) {
            bool isPath = false;

            for (const auto& p : path) {
                if (p.first == i && p.second == j) {
                    isPath = true;
                    break;
                }
            }

            if (isPath) {
                cout << "\033[41m" << setw(maxDigits) << arr[i][j] << " " << "\033[0m";
            }
            else {
                cout << setw(maxDigits) << arr[i][j] << " ";
            }
        }
        cout << endl;
    }
    cout << endl;
}

void print_path(const vector<pair<int, int>>& path) {
    cout << "The path taken by the robot is:" << endl;
    int pathSize = path.size();
    for (int i = 0; i < pathSize; i++) {
        cout << "(" << path[i].first << ", " << path[i].second << ")";
        if (i < pathSize - 1) {
            cout << ", ";
            this_thread::sleep_for(chrono::milliseconds(200));
        }
    }
    cout << endl;
}

bool isValidMove(const vector<vector<int>>& arr, const vector<vector<bool>>& visited, int x, int y) {
    int rows = arr.size();
    int cols = arr[0].size();

    if (x >= 0 && x < rows && y >= 0 && y < cols && !visited[x][y]) {
        return true;
    }

    return false;
}

pair<int, int> findNextMove(const vector<vector<int>>& arr, const vector<vector<bool>>& visited, int x, int y) {
    int rows = arr.size();
    int cols = arr[0].size();

    int max_val = 0;
    pair<int, int> next_move = { -1, -1 };

    if (x - 1 >= 0 && !visited[x - 1][y] && arr[x - 1][y] > max_val) {
        max_val = arr[x - 1][y];
        next_move = { x - 1, y };
    }

    if (x + 1 < rows && !visited[x + 1][y] && arr[x + 1][y] > max_val) {
        max_val = arr[x + 1][y];
        next_move = { x + 1, y };
    }

    if (y - 1 >= 0 && !visited[x][y - 1] && arr[x][y - 1] > max_val) {
        max_val = arr[x][y - 1];
        next_move = { x, y - 1 };
    }

    if (y + 1 < cols && !visited[x][y + 1] && arr[x][y + 1] > max_val) {
        max_val = arr[x][y + 1];
        next_move = { x, y + 1 };
    }

    return next_move;
}

void maze_arc(const vector<vector<int>>& arr, pair<int, int>& position, int& points, vector<pair<int, int>>& path) {
    int x = position.first;
    int y = position.second;
    int rows = arr.size();
    int cols = arr[0].size();

    vector<vector<bool>> visited(rows, vector<bool>(cols, false));
    visited[x][y] = true;
    points = arr[x][y];
    path.push_back({ x, y });

    while (true) {
        pair<int, int> next_move = findNextMove(arr, visited, x, y);

        if (next_move.first == -1 && next_move.second == -1) {
            break;
        }

        x = next_move.first;
        y = next_move.second;
        visited[x][y] = true;
        points += arr[x][y];
        path.push_back({ x, y });

        system("cls");
        print_array(arr, path);
        this_thread::sleep_for(chrono::milliseconds(200));
    }

    position = { x, y };
}
// Function prototypes
void print_array(const vector<vector<int>>& arr, const vector<pair<int, int>>& path);
void print_path(const vector<pair<int, int>>& path);
void maze_arc_parallel(const vector<vector<int>>& arr, int x1, int y1, int& points1, vector<pair<int, int>>& path1,
    int x2, int y2, int& points2, vector<pair<int, int>>& path2);

// A function to print a 2D array with highlighted path
void print_array2(const vector<vector<int>>& arr, const vector<pair<int, int>>& path) {
    int maxDigits = 0;
    // Find the maximum number of digits in the array
    for (const auto& row : arr) {
        for (const auto& num : row) {
            int digits = to_string(num).length();
            if (digits > maxDigits) {
                maxDigits = digits;
            }
        }
    }

    // Print the array with highlighted path
    for (int i = 0; i < static_cast<int>(arr.size()); i++) {
        for (int j = 0; j < static_cast<int>(arr[i].size()); j++) {
            bool isPath = false;

            for (const auto& p : path) {
                if (p.first == i && p.second == j) {
                    isPath = true;
                    break;
                }
            }

            if (isPath) {
                cout << "\033[41m" << setw(maxDigits) << arr[i][j] << " " << "\033[0m";
            }
            else {
                cout << setw(maxDigits) << arr[i][j] << " ";
            }
        }
        cout << endl;
    }
    cout << endl;
}

// A function to print the path taken by the robot
void print_path2(const vector<pair<int, int>>& path) {
    cout << "The path taken by the robot is:" << endl;
    for (const auto& p : path) {
        cout << "(" << p.first << ", " << p.second << ")" << " ";
    }
    cout << endl;
}

// A function to simulate the maze arc for two robots
void maze_arc_parallel(const vector<vector<int>>& arr, int x1, int y1, int& points1, vector<pair<int, int>>& path1,
    int x2, int y2, int& points2, vector<pair<int, int>>& path2) {
    // Initialize the visited array and points for the robots
    vector<vector<bool>> visited(arr.size(), vector<bool>(arr[0].size(), false));
    visited[x1][y1] = true;
    visited[x2][y2] = true;
    points1 = arr[x1][y1];
    points2 = arr[x2][y2];
    path1.push_back({ x1, y1 });
    path2.push_back({ x2, y2 });

    // Clear the console screen
    system("cls");

    // Print the initial array with highlighted paths for the robots
    cout << "The robots:" << endl;
    print_array(arr, path1);
    print_array(arr, path2);
    Sleep(200);

    while (true) {
        int dx1 = 0, dy1 = 0;
        int dx2 = 0, dy2 = 0;
        int max_val1 = 0, max_val2 = 0;

        // Robot 1

        // Top
        if (x1 - 1 >= 0 && !visited[x1 - 1][y1] && arr[x1 - 1][y1] > max_val1) {
            max_val1 = arr[x1 - 1][y1];
            dx1 = -1;
            dy1 = 0;
        }
        // Bottom
        if (x1 + 1 < arr.size() && !visited[x1 + 1][y1] && arr[x1 + 1][y1] > max_val1) {
            max_val1 = arr[x1 + 1][y1];
            dx1 = 1;
            dy1 = 0;
        }
        // Left
        if (y1 - 1 >= 0 && !visited[x1][y1 - 1] && arr[x1][y1 - 1] > max_val1) {
            max_val1 = arr[x1][y1 - 1];
            dx1 = 0;
            dy1 = -1;
        }
        // Right
        if (y1 + 1 < arr[0].size() && !visited[x1][y1 + 1] && arr[x1][y1 + 1] > max_val1) {
            max_val1 = arr[x1][y1 + 1];
            dx1 = 0;
            dy1 = 1;
        }

        // Robot 2

        // Top
        if (x2 - 1 >= 0 && !visited[x2 - 1][y2] && arr[x2 - 1][y2] > max_val2) {
            max_val2 = arr[x2 - 1][y2];
            dx2 = -1;
            dy2 = 0;
        }
        // Bottom
        if (x2 + 1 < arr.size() && !visited[x2 + 1][y2] && arr[x2 + 1][y2] > max_val2) {
            max_val2 = arr[x2 + 1][y2];
            dx2 = 1;
            dy2 = 0;
        }
        // Left
        if (y2 - 1 >= 0 && !visited[x2][y2 - 1] && arr[x2][y2 - 1] > max_val2) {
            max_val2 = arr[x2][y2 - 1];
            dx2 = 0;
            dy2 = -1;
        }
        // Right
        if (y2 + 1 < arr[0].size() && !visited[x2][y2 + 1] && arr[x2][y2 + 1] > max_val2) {
            max_val2 = arr[x2][y2 + 1];
            dx2 = 0;
            dy2 = 1;
        }

        // Check if both robots are stuck (no valid move)
        if (dx1 == 0 && dy1 == 0 && dx2 == 0 && dy2 == 0) {
            break;
        }

        // Move Robot 1
        if (dx1 != 0 || dy1 != 0) {
            x1 += dx1;
            y1 += dy1;
            visited[x1][y1] = true;
            points1 += arr[x1][y1];
            path1.push_back({ x1, y1 });
        }

        // Move Robot 2
        if (dx2 != 0 || dy2 != 0) {
            x2 += dx2;
            y2 += dy2;
            visited[x2][y2] = true;
            points2 += arr[x2][y2];
            path2.push_back({ x2, y2 });
        }

        // Clear the console screen
        system("cls");

        // Print the updated array with highlighted paths for the robots
        cout << "The robots:" << endl;
        print_array(arr, path1);
        print_array(arr, path2);
        Sleep(200);
    }

    // Print the final paths taken by the robots
    cout << "Robot 1:" << endl;
    print_path(path1);
    cout << "Total points collected by Robot 1: " << points1 << endl;

    cout << "Robot 2:" << endl;
    print_path(path2);
    cout << "Total points collected by Robot 2: " << points2 << endl;
}

// Function prototypes
void print_array(const vector<vector<int>>& arr, const vector<pair<int, int>>& path);
void print_path(const vector<pair<int, int>>& path);
void maze_arc_parallel(const vector<vector<int>>& arr, int x1, int y1, int& points1, vector<pair<int, int>>& path1,
    int x2, int y2, int& points2, vector<pair<int, int>>& path2);

// A function to print a combined matrix with highlighted paths for both robots
void print_array(const vector<vector<int>>& arr, const vector<pair<int, int>>& path1, const vector<pair<int, int>>& path2) {
    int maxDigits = 0;
    // Find the maximum number of digits in the array
    for (const auto& row : arr) {
        for (const auto& num : row) {
            int digits = to_string(num).length();
            if (digits > maxDigits) {
                maxDigits = digits;
            }
        }
    }

    // Print the array with highlighted paths
    for (int i = 0; i < static_cast<int>(arr.size()); i++) {
        for (int j = 0; j < static_cast<int>(arr[i].size()); j++) {
            bool isPath1 = false;
            bool isPath2 = false;

            for (const auto& p : path1) {
                if (p.first == i && p.second == j) {
                    isPath1 = true;
                    break;
                }
            }

            for (const auto& p : path2) {
                if (p.first == i && p.second == j) {
                    isPath2 = true;
                    break;
                }
            }

            if (isPath1 && isPath2) {
                cout << "\033[45m" << setw(maxDigits) << arr[i][j] << " " << "\033[0m";
            }
            else if (isPath1) {
                cout << "\033[41m" << setw(maxDigits) << arr[i][j] << " " << "\033[0m";
            }
            else if (isPath2) {
                cout << "\033[44m" << setw(maxDigits) << arr[i][j] << " " << "\033[0m";
            }
            else {
                cout << setw(maxDigits) << arr[i][j] << " ";
            }
        }
        cout << endl;
    }
    cout << endl;
}

// A function to print the path taken by the robot
void print_path(const vector<pair<int, int>>& path) {
    cout << "The path taken by the robot is:" << endl;
    for (const auto& p : path) {
        cout << "(" << p.first << ", " << p.second << ")" << " ";
    }
    cout << endl;
}

// A function to simulate the maze arc for two robots
void maze_arc_parallel(const vector<vector<int>>& arr, int x1, int y1, int& points1, vector<pair<int, int>>& path1,
    int x2, int y2, int& points2, vector<pair<int, int>>& path2) {
    // Initialize the visited array and points for the robots
    vector<vector<bool>> visited(arr.size(), vector<bool>(arr[0].size(), false));
    visited[x1][y1] = true;
    visited[x2][y2] = true;
    points1 = arr[x1][y1];
    points2 = arr[x2][y2];
path1.push_back({ x1, y1 });
    path2.push_back({ x2, y2 });

    // Clear the console screen
    system("cls");

    // Print the initial array with highlighted paths for the robots
    cout << "The robots:" << endl;
    print_array(arr, path1, path2);
    Sleep(1000);

    while (true) {
        int dx1 = 0, dy1 = 0;
        int dx2 = 0, dy2 = 0;
        int max_val1 = 0, max_val2 = 0;

        // Robot 1

        // Top
        if (x1 - 1 >= 0 && !visited[x1 - 1][y1] && arr[x1 - 1][y1] > max_val1) {
            max_val1 = arr[x1 - 1][y1];
            dx1 = -1;
            dy1 = 0;
        }
        // Bottom
        if (x1 + 1 < arr.size() && !visited[x1 + 1][y1] && arr[x1 + 1][y1] > max_val1) {
            max_val1 = arr[x1 + 1][y1];
            dx1 = 1;
            dy1 = 0;
        }
        // Left
        if (y1 - 1 >= 0 && !visited[x1][y1 - 1] && arr[x1][y1 - 1] > max_val1) {
            max_val1 = arr[x1][y1 - 1];
            dx1 = 0;
            dy1 = -1;
        }
        // Right
        if (y1 + 1 < arr[0].size() && !visited[x1][y1 + 1] && arr[x1][y1 + 1] > max_val1) {
            max_val1 = arr[x1][y1 + 1];
            dx1 = 0;
            dy1 = 1;
        }

        // Move Robot 1
        if (dx1 != 0 || dy1 != 0) {
            x1 += dx1;
            y1 += dy1;
            visited[x1][y1] = true;
            points1 += arr[x1][y1];
            path1.push_back({ x1, y1 });
        }
        // Clear the console screen
        system("cls");

        // Print the updated array with highlighted paths for the robots
        cout << "The robots:" << endl;
        print_array(arr, path1, path2);
        Sleep(1000);
        // Robot 2

        // Top
        if (x2 - 1 >= 0 && !visited[x2 - 1][y2] && arr[x2 - 1][y2] > max_val2) {
            max_val2 = arr[x2 - 1][y2];
            dx2 = -1;
            dy2 = 0;
        }
        // Bottom
        if (x2 + 1 < arr.size() && !visited[x2 + 1][y2] && arr[x2 + 1][y2] > max_val2) {
            max_val2 = arr[x2 + 1][y2];
            dx2 = 1;
            dy2 = 0;
        }
        // Left
        if (y2 - 1 >= 0 && !visited[x2][y2 - 1] && arr[x2][y2 - 1] > max_val2) {
            max_val2 = arr[x2][y2 - 1];
            dx2 = 0;
            dy2 = -1;
        }
        // Right
        if (y2 + 1 < arr[0].size() && !visited[x2][y2 + 1] && arr[x2][y2 + 1] > max_val2) {
            max_val2 = arr[x2][y2 + 1];
            dx2 = 0;
            dy2 = 1;
        }

        // Move Robot 2
        if (dx2 != 0 || dy2 != 0) {
            x2 += dx2;
            y2 += dy2;
            visited[x2][y2] = true;
            points2 += arr[x2][y2];
            path2.push_back({ x2, y2 });
        }

        // Clear the console screen
        system("cls");

        // Print the updated array with highlighted paths for the robots
        cout << "The robots:" << endl;
        print_array(arr, path1, path2);
        Sleep(200);

        // Check if both robots are stuck (no valid moves)
if (dx1 == 0 && dy1 == 0 && dx2 == 0 && dy2 == 0) {
            break;
        }
    }

    // Print the final paths taken by the robots
    cout << "Robot 1:" << endl;
    print_path(path1);
    cout << "Total points collected by Robot 1: " << points1 << endl;
    cout << "Robot 2:" << endl;
    print_path(path2);
    cout << "Total points collected by Robot 2: " << points2 << endl;
    // Compare 2 robot
    if (points1 > points2) cout << "Robot 1 win" << endl;
    else if (points1 < points2) cout << "Robot 2 win" << endl;
    else if (points1 == points2) cout << "Equal" << endl;
}

int main() {
    ifstream ip("C:\\Users\\Thinh\\Desktop\\input.txt");
    vector<vector<int>> arr;
    string data;
    while (getline(ip, data)) {
        stringstream ss(data);
        int num;
        vector<int> temp;
        while (ss >> num) {
            temp.push_back(num);
        }
        arr.push_back(temp);
    }
    ip.close();


int option;
cout<<"1.Duong di 1 robot."<<endl;
cout<<"2.Duong di 2 robot doc lap."<<endl;
cout<<"3.Duong di 2 robot chung 1 ma tran."<<endl;

cout<<"Nhap lua chon:";
cin>>option;

switch (option) {
	case 1:{
cout << "The array is:" << endl;
    print_array(arr, {});

	int x, y;
    cout << "Enter the initial position of the robot (x, y): ";
    cin >> x>> y;

    pair<int, int> position = { x, y };
    int points = 0;
    vector<pair<int, int>> path;
    maze_arc(arr, position, points, path);

    print_path(path);

    cout << "The final points for the robot are: " << points << endl;

		break;
	}
	case 2: {
    int x1, y1; // Starting position for Robot 1
    int x2, y2; // Starting position for Robot 2
    
    cout << "Enter the starting position for Robot 1 (x1 y1): ";
    cin >> x1 >> y1;
    
    cout << "Enter the starting position for Robot 2 (x2 y2): ";
    cin >> x2 >> y2;

    int points1 = 0, points2 = 0;
    vector<pair<int, int>> path1, path2;

    maze_arc_parallel(arr, x1, y1, points1, path1, x2, y2, points2, path2);
    
    if (points1 > points2) 
        cout << "Robot 1 wins!" << endl;
    else if (points1 < points2) 
        cout << "Robot 2 wins!" << endl;
    else 
        cout << "It's a tie!" << endl;

		break;
	}
	case 3: {
		   int x1, y1, x2, y2;
    cout << "Enter the starting position for Robot 1 (x, y): ";
    cin >> x1 >> y1;
    cout << "Enter the starting position for Robot 2 (x, y): ";
    cin >> x2 >> y2;
    int points1 = 0, points2 = 0;
    vector<pair<int, int>> path1, path2;
    maze_arc_parallel(arr, x1, y1, points1, path1, x2, y2, points2, path2);

		break;
	}
	default:
		cout<<"nhap sai "<<endl;
		break;
}
    return 0;
}
